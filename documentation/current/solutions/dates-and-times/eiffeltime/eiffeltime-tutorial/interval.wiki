[[Property:title|Interval]]
[[Property:weight|2]]
Class <eiffel>INTERVAL</eiffel> deals with intervals between two instances of the same class which conform to<eiffel> ABSOLUTE</eiffel> ( <eiffel>DATE</eiffel>, <eiffel>TIME</eiffel>, <eiffel>DATE_TIME</eiffel>). The notions of interval is directly linked with the notion of order. 

The <eiffel>start_bound</eiffel> must be before the <eiffel>end_bound</eiffel>.

====Creation====

The features <eiffel>make</eiffel>, <eiffel>set_start_bound</eiffel> and <eiffel>set_end_bound</eiffel> take clones of their arguments, so that if these arguments are changed, the interval previously created is not.

It would have been possible to create intervals with references to date or time, but a modification of the dates would have been effective in the interval so that only the invariant would have been able to check if the <eiffel>start_bound</eiffel> is still before the <eiffel>end_bound</eiffel>.

====Interval measurement====

The measure of intervals is made by duration: the result is an instance of the class <eiffel>DURATION</eiffel>. However, as <eiffel>DURATION</eiffel> is the common parent of <eiffel>TIME_DURATION</eiffel>, <eiffel>DATE_DURATION</eiffel> and <eiffel>DATE_TIME_DURATION</eiffel>, it does not have many features available. Some features in class <eiffel>TIME</eiffel>, <eiffel>DATE</eiffel>, <eiffel>DATE_TIME</eiffel> return the same result and are more efficient to use. <eiffel>DURATION</eiffel> has to be use as the last solution. 

====Comparison====

It includes intersection, inclusion and a special comparison.
* <eiffel>is_equal</eiffel> is present and compare values, not references.
* Feature <eiffel>intersects</eiffel> returns the mathematical result of the intersection of two intervals.
* <eiffel>is_strict_included_by</eiffel>, <eiffel>strict_includes</eiffel>, <eiffel>is_included_by</eiffel> and <eiffel>includes</eiffel> are connected to the same notion of inclusion.
* <, + > and >= use a special rule to compare intervals. int1 < int2 is true if int1 starts and ends strictly before int2. The other features use the <eiffel>same rule</eiffel> and<eiffel> is_equal</eiffel> if needed.
* <eiffel>overlaps</eiffel> looks like <eiffel>intersects</eiffel> but the argument has to be after the current interval. <eiffel>is_overlapped</eiffel> is the opposite.
* <eiffel>meets</eiffel> and <eiffel>is_met</eiffel> are used to test if two intervals have a common bound.

====Status Report====

The main part of the functions need an argument from the same generic type and return a <eiffel>BOOLEAN</eiffel> value.
* <eiffel>empty</eiffel> tests if the bounds are equal.
* <eiffel>has</eiffel>,<eiffel> strict_before</eiffel>, <eiffel>strict_after</eiffel>,<eiffel> before</eiffel> and <eiffel>after</eiffel> test the position of an element relatively to the current interval.

====Element change====

<eiffel>set_start_bound</eiffel> and <eiffel>set_end_bound</eiffel> are available to change the bounds.

====Operations====

<eiffel>Union</eiffel> and <eiffel>intersection</eiffel> are the mathematical functions. <eiffel>gather</eiffel> requires that two intervals meet each other and then yields the union.




