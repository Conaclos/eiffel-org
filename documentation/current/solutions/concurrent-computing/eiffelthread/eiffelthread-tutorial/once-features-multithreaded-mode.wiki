[[Property:title|Once features in multithreaded mode]]
[[Property:weight|4]]
[[Property:uuid|5578da29-7603-b501-1a7d-305d20fd6485]]
==Manipulating Once features in multithreaded mode==

Eiffel introduced the powerful mechanism of once routines. A once routine has a body that will be executed only once, at the first call. Subsequent calls will have no further effect and, in the case of a function, will return the same result as the first. This provides a simple way of sharing objects in an object-oriented context. 

For multithreaded applications, the appropriate semantics is that once routines must be called once per thread (rather than once per process). This is the semantics supported by EiffelThread. 

Then the once feature is not initialized once per process but once per thread. Your once feature will be called again in any new thread execution. 

==Once per Process/Thread==

By default, once features are once per thread. This means that when a once feature is called in a thread, the Eiffel run-time will check whether it has been already computed in this thread. If not, the once feature will be initialized and computed. This corresponds to the most commonly desired behavior for once features in multithreaded mode: most of the time, a once called in a thread is not likely to share its result with other threads. 

This is only the default, however: you have a choice between "once per thread" and  "once per process" 

==Specifying once per process or once per thread ==

Here is what you will do to define a feature as a once per process:
<code>
class
    TEST_ONCE_PER_PROCESS

feature -- Access

    object_per_thread: OBJECT
            -- Once per thread.
        once ("THREAD")
            create Result.make
        end

    object_per_process: OBJECT
            -- New 'object' (once per process)
            -- that could be shared between threads
            -- without reinitializing it.
        once ("PROCESS")
            create Result.make
        end

end -- class TEST_ONCE_PER_PROCESS
</code>

Note that if you don't precise any once's key, the default is once per thread. For instance the following once is per thread.
<eiffel>
   object_per_thread: OBJECT
            -- Once per thread.
        once
            create Result.make
        end
</eiffel>

You can do the same with once procedures. 



