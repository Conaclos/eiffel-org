[[Property:title|Eiffel language syntax]]
[[Property:link_title|Eiffel programming language syntax]]
[[Property:weight|0]]
[[Property:uuid|d0f94270-f1e0-5545-2b1a-8cde3a6c73ab]]
{{underconstruction}}




The syntax specification is shown here as it is in the standard document. The format is BNF-E. The Language Specification section of the standard document includes an overview of BNF-E. 


==Eiffel Syntax==

There are a few parts of the syntax that are either non-production or non-representable in BNF-E which have been omitted from the following specification. These omitted parts of the syntax definition add to the precision of the specification, but knowledge of them is not always vital for developers. 

Probably the most important to developers is the definition of an ''identifier'':

===Identifiers===

An '''identifier''' is a sequence of one or more alpha_numeric characters of which the first is a letter. 

The definition is augmented by the rule that Identifiers are not valid if they are the same as one of the language's reserved words.


===Class names ===
Class_name ::= [[#Identfiers|Identifier]] <br/><br/>
<br/>
===Class declarations ===
Class_declaration ::= <nowiki>[</nowiki>[[#Notes|Notes]]<nowiki>]</nowiki> <br/>
[[#Class headers|Class_header]] <br/>
<nowiki>[</nowiki>[[#Formal generic parameters|Formal_generics]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Obsolete marks|Obsolete]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Inheritance parts|Inheritance]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Creators parts|Creators]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Converter clauses|Converters]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Feature parts|Features]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Assertions|Invariant]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Notes|Notes]]<nowiki>]</nowiki> <br/>
<code>end</code><br/>
<br/>
===Notes ===
Notes ::= <code>note</code> Note_list<br/>
Note_list ::= {Note_entry ";" …}* <br/>
Note_entry ::= Note_name Note_values <br/>
Note_name ::= [[#Identifiers|Identifier]] ":" <br/>
Note_values ::= {Note_item ","…}+ <br/>
Note_item ::= [[#Identifiers|Identifier]] | [[#Manifest constants|Manifest_constant]] <br/>
<br/>
===Class headers ===
Class_header ::= [Header_mark] <code>class</code> [[#Class names|Class_name]] <br/>
Header_mark ::= <code>deferred</code> | <code>expanded</code> | <code>frozen</code> <br/>
<br/>
===Obsolete marks ===
Obsolete ::= <code>obsolete</code> Message <br/>
Message ::= [[#Manifest strings|Manifest_string]] <br/>
<br/>
===Feature parts ===
Features ::= Feature_clause+ <br/>
Feature_clause ::= <code>feature</code> <nowiki>[</nowiki>[[#Clients|Clients]]<nowiki>]</nowiki> <nowiki>[</nowiki>[[#Feature parts|Header_comment]]<nowiki>]</nowiki> Feature_declaration_list <br/>
Feature_declaration_list ::= {[[#Feature declarations|Feature_declaration]] ";" …}* <br/>
Header_comment ::= [[#Comments|Comment]] <br/>
<br/>
===Feature declarations ===
Feature_declaration ::= [[#New feature lists|New_feature_list]] Declaration_body <br/>
Declaration_body ::= <nowiki>[</nowiki>[[#Formal argument and entity declarations|Formal_arguments]]<nowiki>]</nowiki> [Query_mark] [Feature_value] <br/>
Query_mark ::= Type_mark <nowiki>[</nowiki>[[#Assigner marks|Assigner_mark]]<nowiki>]</nowiki> <br/>
Type_mark ::= ":" [[#Types|Type]] <br/>
Feature_value ::= [Explicit_value] <br/>
<nowiki>[</nowiki>[[#Obsolete parts|Obsolete]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Feature parts|Header_comment]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Feature bodies|Attribute_or_routine]]<nowiki>]</nowiki> <br/>
Explicit_value ::= "=" Manifest_constant <br/>
<br/>
<br/>
===New feature lists ===
New_feature_list ::= {New_feature "," …}+ <br/>
New_feature ::= [<code>frozen</code>] [[#Feature names|Extended_feature_name]]<br/>
<br/>
<br/>
===Feature bodies ===
Attribute_or_routine ::= <nowiki>[</nowiki>[[#Assertions|Precondition]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Local variable declarations|Local_declarations]]<nowiki>]</nowiki> <br/>
Feature_body <br/>
<nowiki>[</nowiki>[[#Assertions|Postcondition]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Rescue clauses|Rescue]]<nowiki>]</nowiki> <br/>
<code>end</code><br/>
Feature_body ::= [[#Routine bodies|Deferred]] | [[#Routine bodies|Effective_routine]] | [[#Attribute bodies|Attribute]]<br/>
<br/>
<br/>
===Feature names ===
Extended_feature_name ::= Feature_name [Alias] <br/>
Feature_name ::= [[#Identfiers|Identifier]] <br/>
Alias ::= <code>alias</code> '"' Alias_name '"' [<code>convert</code>] <br/>
Alias_name ::= [[#Operators|Operator]] | Bracket <br/>
Bracket ::= "[  ]" <br/>
<br/>
<br/>
===Operators ===
Operator ::= Unary | Binary <br/>
Unary ::= <code>not</code> | "+" | "–" | Free_unary <br/>
Binary ::= "+" | "–" | "*" | "/" | "//" | "\\" | "^" | ".." | <br/>
"<" | ">" | "<=" | ">=" | <br/>
<code>and</code> | <code>or</code> | <code>xor</code> | <code>and</code> <code>then</code> | <code>or</code> <code>else</code> | <code>implies</code> | <br/>
Free_binary <br/>
{{note| Free_unary and Free_binary are free operators that are distinct from (respectively) the ''standard'' unary and binary operators (one- or two-character symbols) explicitly listed in the Unary and Binary productions. See ''Definition: Free operator'' in the standard for more precision.}}
<br/>
<br/>
===Assigner marks ===
Assigner_mark ::= <code>assign</code> [[#Feature names|Feature_name]]<br/>
<br/>
<br/>
===Inheritance parts ===
Inheritance ::= Inherit_clause+ <br/>
Inherit_clause ::= <code>inherit</code> [Non_conformance] Parent_list <br/>
Non_conformance ::= "{" NONE "}" <br/>
Parent_list ::= {Parent ";" …}+ <br/>
Parent ::= [[#Types|Class_type]] [Feature_adaptation] <br/>
Feature_adaptation ::= <nowiki>[</nowiki>[[#Undefine clauses|Undefine]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Redefinition|Redefine]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Rename clauses|Rename]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Export adaptation|New_exports]]<nowiki>]</nowiki> <br/>
<nowiki>[</nowiki>[[#Select clauses|Select]]<nowiki>]</nowiki> <br/>
<code>end</code> <br/>
<br/>
<br/>
<br/>
===Rename clauses ===
Rename ::= <code>rename</code> Rename_list <br/>
Rename_list ::= {Rename_pair "," …}+ <br/>
Rename_pair ::= [[#Feature names|Feature_name]] <code>as</code> [[#Feature names|Extended_feature_name]] <br/>
<br/>
<br/>
===Clients ===
Clients ::= "{" Class_list "}" <br/>
Class_list ::= {[[#Class names|Class_name]] "," …}+<br/>
<br/>
<br/>
<br/>
===Export adaptation ===
New_exports ::= <code>export</code> New_export_list <br/>
New_export_list ::= {New_export_item ";" …}+ <br/>
New_export_item ::= [[#Clients|Clients]] <nowiki>[</nowiki>[[#Feature parts|Header_comment]]<nowiki>]</nowiki> Feature_set <br/>
Feature_set ::= Feature_list | <code>all</code> <br/>
Feature_list ::= {[[#Feature names|Feature_name]] "," …}+<br/>
<br/>
<br/>
<br/>
===Formal argument and entity declarations ===
Formal_arguments ::= "(" Entity_declaration_list ")" <br/>
Entity_declaration_list ::= {Entity_declaration_group ";" …}+ <br/>
Entity_declaration_group ::= Identifier_list Type_mark <br/>
Identifier_list ::= {[[#Identfiers|Identifier]] "," …}+ <br/>
<br/>
<br/>
===Routine bodies ===
Deferred ::= <code>deferred</code> <br/>
Effective_routine ::= Internal | External <br/>
Internal ::= Routine_mark Compound <br/>
Routine_mark ::= <code>do</code> | Once <br/>
Once ::= <code>once</code> [ "("Key_list ")" ] <br/>
Key_list ::= {Manifest_string "," …}+<br/>
<br/>
<br/>
===Local variable declarations ===
Local_declarations ::= <code>local</code> [Entity_declaration_list]<br/>
<br/>
<br/>
===Instructions ===
Compound ::= {Instruction ";" …}* <br/>
Instruction ::= Creation_instruction | Call | Assignment | Assigner_call | Conditional | Multi_branch <br/>
| Loop | Debug | Precursor | Check | Retry<br/>
<br/>
<br/>
===Assertions ===
Precondition ::= <code>require</code> [else] Assertion <br/>
Postcondition ::= <code>ensure</code> [then] Assertion [Only] <br/>
Invariant ::= <code>invariant</code> Assertion <br/>
Assertion ::= {Assertion_clause ";" …}* <br/>
Assertion_clause ::= [Tag_mark] Unlabeled_assertion_clause <br/>
Unlabeled_assertion_clause ::= Boolean_expression | Comment <br/>
Tag_mark ::= Tag ":" <br/>
Tag ::= [[#Identfiers|Identifier]] <br/>
<br/>
<br/>
===“Old” postcondition expressions ===
Old ::= <code>old</code> Expression<br/>
<br/>
<br/>
===“Only” postcondition clauses ===
Only ::= <code>only</code> <nowiki>[</nowiki>[[#Export adaptation|Feature_list]]<nowiki>]</nowiki><br/>
<br/>
<br/>
===Check instructions ===
Check ::= <code>check</code> Assertion [Notes] end<br/>
<br/>
<br/>
===Variants ===
Variant ::= <code>variant</code> [Tag_mark] Expression<br/>
<br/>
<br/>
===Precursor ===
Precursor ::= <code>Precursor</code> [Parent_qualification] [Actuals] <br/>
Parent_qualification ::= "{" [[#Class names|Class_name]] "}"<br/>
<br/>
<br/>
===Redefinition ===
Redefine ::= <code>redefine</code> [[#Export adaptation|Feature_list]]<br/>
<br/>
<br/>
===Undefine clauses ===
Undefine ::= <code>undefine</code> [[#Export adaptation|Feature_list]]<br/>
<br/>
<br/>
===Types ===
Type ::= Class_or_tuple_type | Formal_generic_name | Anchored <br/>
Class_or_tuple_type ::= Class_type | Tuple_type <br/>
Class_type ::= [Attachment_mark] [[#Class names|Class_name]] [Actual_generics] <br/>
Attachment_mark ::= "?"  |  "!" <br/>
Anchored ::= [Attachment_mark] <code>like</code> Anchor <br/>
Anchor ::= [[#Feature names|Feature_name]] | Current<br/>
<br/>
<br/>
===Actual generic parameters ===
Actual_generics ::= "[" Type_list "]" <br/>
Type_list ::= {Type "," …}+<br/>
<br/>
<br/>
===Formal generic parameters ===
Formal_generics ::= "[" Formal_generic_list "]" <br/>
Formal_generic_list ::= {Formal_generic ","…}+ <br/>
Formal_generic ::= [<code>frozen</code>] Formal_generic_name [Constraint] <br/>
Formal_generic_name ::= [?] [[#Identfiers|Identifier]]<br/>
<br/>
<br/>
===Generic constraints ===
Constraint ::= "–>" Constraining_types [Constraint_creators] <br/>
Constraining_types ::= Single_constraint | Multiple_constraint <br/>
Single_constraint ::= Type [Renaming] <br/>
Renaming ::= [[#Rename clauses|Rename]] end<br/>
Multiple_constraint ::= "{" Constraint_list "}" <br/>
Constraint_list ::= {Single_constraint "," …}+ <br/>
Constraint_creators ::= <code>create</code> [[#Export adaptation|Feature_list]] end<br/>
<br/>
<br/>
===Tuple types ===
Tuple_type ::= <code>TUPLE</code> [Tuple_parameter_list] <br/>
Tuple_parameter_list ::= "[" Tuple_parameters "]"<br/>
Tuple_parameters ::= Type_list | Entity_declaration_list<br/>
<br/>
<br/>
===Manifest tuples ===
Manifest_tuple ::= "[" Expression_list "]" <br/>
Expression_list ::= {Expression "," …}*<br/>
<br/>
<br/>
===Converter clauses ===
Converters ::= <code>convert</code> Converter_list <br/>
Converter_list ::= {Converter ","…}+ <br/>
Converter ::= Conversion_procedure | Conversion_query <br/>
Conversion_procedure ::= [[#Feature names|Feature_name]] "(" "{" Type_list "}" ")" <br/>
Conversion_query ::= [[#Feature names|Feature_name]] ":" "{" Type_list "}"<br/>
<br/>
<br/>
===Select clauses ===
Select ::= <code>select</code> [[#Export adaptation|Feature_list]]<br/>
<br/>
<br/>
===Conditionals ===
Conditional ::= <code>if</code> Then_part_list [Else_part] <code>end</code> <br/>
Then_part_list ::= {Then_part <code>elseif</code> …}+ <br/>
Then_part ::= Boolean_expression <code>then</code> Compound <br/>
Else_part ::= <code>else</code> Compound<br/>
<br/>
<br/>
===Multi-branch instructions ===
Multi_branch ::= <code>inspect</code> Expression [When_part_list] [Else_part] <code>end</code> <br/>
When_part_list ::= When_part+ <br/>
When_part ::= <code>when</code> Choices <code>then</code> Compound <br/>
Choices ::= {Choice "," …}+ <br/>
Choice ::= Constant | Manifest_type | Constant_interval | Type_interval <br/>
Constant_interval ::= Constant ".." Constant <br/>
Type_interval ::= Manifest_type ".." Manifest_type<br/>
<br/>
<br/>
===Loops ===
Loop ::= Initialization <br/>
[Invariant] <br/>
Exit_condition <br/>
Loop_body <br/>
[Variant] <br/>
<code>end</code> <br/>
Initialization ::= <code>from</code> Compound <br/>
Exit_condition ::= <code>until</code> Boolean_expression <br/>
Loop_body ::= <code>loop</code> Compound<br/>
<br/>
<br/>
===Debug instructions ===
Debug ::= <code>debug</code> [ "("Key_list ")" ] Compound end<br/>
<br/>
<br/>
===Attribute bodies ===
Attribute ::= <code>attribute</code> Compound<br/>
<br/>
<br/>
===Entities and variables ===
Entity ::= Variable | Read_only <br/>
Variable ::= Variable_attribute | Local <br/>
Variable_attribute ::= [[#Feature names|Feature_name]] <br/>
Local ::= [[#Identfiers|Identifier]] | <code>Result</code> <br/>
Read_only ::= Formal | Constant_attribute | <code>Current</code> <br/>
Formal ::= [[#Identfiers|Identifier]] <br/>
Constant_attribute ::= [[#Feature names|Feature_name]]<br/>
<br/>
<br/>
===Creators parts ===
Creators ::= Creation_clause+ <br/>
Creation_clause ::= <code>create</code> <nowiki>[</nowiki>[[#Clients|Clients]]<nowiki>]</nowiki> <nowiki>[</nowiki>[[#Feature parts|Header_comment]]<nowiki>]</nowiki> Creation_procedure_list <br/>
Creation_procedure_list ::= {Creation_procedure ","…}+ <br/>
Creation_procedure ::= [[#Feature names|Feature_name]]<br/>
<br/>
<br/>
===Creation instructions ===
Creation_instruction ::= <code>create</code> [Explicit_creation_type] Creation_call <br/>
Explicit_creation_type ::= "{" Type "}" <br/>
Creation_call ::= Variable [Explicit_creation_call] <br/>
Explicit_creation_call ::= "." Unqualified_call<br/>
<br/>
<br/>
===Creation expressions ===
Creation_expression ::= <code>create</code> Explicit_creation_type [Explicit_creation_call]<br/>
<br/>
<br/>
===Equality expressions ===
Equality ::= Expression Comparison Expression <br/>
Comparison ::= "=" | "/=" | "~" | "/~"<br/>
<br/>
<br/>
===Assignments ===
Assignment ::= Variable ":=" Expression<br/>
<br/>
<br/>
===Assigner calls ===
Assigner_call ::= Expression ":=" Expression<br/>
<br/>
<br/>
===Feature calls ===
Call ::= Object_call | Non_object_call <br/>
Object_call ::= [Target "."] Unqualified_call <br/>
Unqualified_call ::= [[#Feature names|Feature_name]] [Actuals] <br/>
Target ::= Local | Read_only | Call | Parenthesized_target <br/>
Parenthesized_target ::= "( |" Expression "| )" <br/>
Non_object_call ::= "{" Type "}" "." Unqualified_call<br/>
<br/>
<br/>
===Actual arguments ===
Actuals ::= "(" Actual_list ")" <br/>
Actual_list ::= {Expression "," …}+<br/>
<br/>
<br/>
===Object test ===
Object_test ::= "{" [[#Identfiers|Identifier]] ":" Type "}" Expression<br/>
<br/>
<br/>
===Rescue clauses ===
Rescue ::= <code>rescue</code> Compound <br/>
Retry ::= retry<br/>
<br/>
<br/>
===Agents ===
Agent ::= Call_agent | Inline_agent <br/>
Call_agent ::= <code>agent</code> Call_agent_body <br/>
Inline_agent ::= <code>agent</code> <nowiki>[</nowiki>[[#Formal argument and entity declarations|Formal_arguments]]<nowiki>]</nowiki> [Type_mark] <nowiki>[</nowiki>[[#Feature bodies|Attribute_or_routine]]<nowiki>]</nowiki> [Agent_actuals]<br/>
<br/>
<br/>
===Call agent bodies ===
Call_agent_body ::= Agent_qualified | Agent_unqualified <br/>
Agent_qualified ::= Agent_target ". " Agent_unqualified <br/>
Agent_unqualified ::= [[#Feature names|Feature_name]] [Agent_actuals] <br/>
Agent_target ::= Entity | Parenthesized | Manifest_type <br/>
Agent_actuals ::= "(" Agent_actual_list ")" <br/>
Agent_actual_list ::= {Agent_actual "," …}+ <br/>
Agent_actual ::= Expression | Placeholder <br/>
Placeholder ::= [Manifest_type] "?"<br/>
<br/>
<br/>
===Expressions ===
Expression ::= Basic_expression | Special_expression <br/>
Basic_expression ::= Read_only | Local | Call | Precursor | Equality | Parenthesized | Old | <br/>
Operator_expression | Bracket_expression  | Creation_expression <br/>
Special_expression ::= Manifest_constant | Manifest_tuple | Agent | Object_test | Once_string | <br/>
Address <br/>
Parenthesized ::= "(" Expression ")" <br/>
Address ::= "$" Variable <br/>
Once_string ::= <code>once</code> Manifest_string <br/>
Boolean_expression ::= Basic_expression | Boolean_constant | Object_test<br/>
<br/>
<br/>
===Operator expressions ===
Operator_expression ::= Unary_expression | Binary_expression <br/>
Unary_expression ::= Unary Expression <br/>
Binary_expression ::= Expression Binary Expression<br/>
<br/>
<br/>
===Bracket expressions ===
Bracket_expression ::= Bracket_target "[" Actuals "]" <br/>
Bracket_target ::= Target | Once_string | Manifest_constant | Manifest_tuple<br/>
<br/>
<br/>
===Constants ===
Constant ::= Manifest_constant | Constant_attribute <br/>
Constant_attribute ::= [[#Feature names|Feature_name]]<br/>
<br/>
<br/>
===Manifest constants ===
Manifest_constant ::= [Manifest_type] Manifest_value <br/>
Manifest_type ::= "{" Type "}"<br/>
Manifest_value ::= Boolean_constant |  <br/>
Character_constant |  <br/>
Integer_constant |  <br/>
Real_constant |  <br/>
Manifest_string | <br/>
Manifest_type <br/>
Sign ::= "+" | "–" <br/>
Integer_constant ::= [Sign] Integer <br/>
Character_constant ::= " ' " Character " ' " <br/>
Boolean_constant ::= <code>True</code> | <code>False</code> <br/>
Real_constant ::= [Sign] Real<br/>
<br/>
<br/>
===Manifest strings ===
Manifest_string ::= Basic_manifest_string | Verbatim_string <br/>
Basic_manifest_string ::= ' " '  String_content  ' " ' <br/>
String_content ::= {Simple_string Line_wrapping_part …}+<br/>
Verbatim_string ::= Verbatim_string_opener Line_sequence Verbatim_string_closer <br/>
Verbatim_string_opener ::= ' " ' [Simple_string] Open_bracket <br/>
Verbatim_string_closer ::= Close_bracket [Simple_string] ' " ' <br/>
Open_bracket ::= "[" | "{" <br/>
Close_bracket ::= "]" | "}"Verbatim_string ::= Verbatim_string_opener Line_sequence Verbatim_string_closer <br/>
Verbatim_string_opener ::= ' " ' [Simple_string] Open_bracket <br/>
Verbatim_string_closer ::= Close_bracket [Simple_string] ' " ' <br/>
Open_bracket ::= "[" | "{" <br/>
Close_bracket ::= "]" | "}" <br/>
<br/>
<br/>
===External routines ===
External ::= <code>external</code> External_language [External_name] <br/>
External_language ::= Unregistered_language | Registered_language <br/>
Unregistered_language ::= Manifest_string <br/>
External_name ::= <code>alias</code> Manifest_string<br/>
<br/>
<br/>
===Registered languages ===
Registered_language ::= C_external | C++_external | DLL_external<br/>
<br/>
<br/>
===External signatures ===
External_signature ::= signature [External_argument_types] [: External_type] <br/>
External_argument_types ::= "(" External_type_list ")" <br/>
External_type_list ::= {External_type "," …}* <br/>
External_type ::= Simple_string<br/>
<br/>
<br/>
===External file use ===
External_file_use ::= use External_file_list <br/>
External_file_list ::= {External_file "," …}+ <br/>
External_file ::= External_user_file | External_system_file <br/>
External_user_file ::= ' " '  Simple_string  ' " ' <br/>
External_system_file ::= "<"Simple_string ">"<br/>
<br/>
<br/>
===C externals ===
C_external ::= ’' " ' C  <br/>
’[inline] <br/>
[External_signature] [External_file_use] <br/>
' " '<br/>
<br/>
<br/>
===C++ externals ===
C++_external ::= ' " '  C++  <br/>
inline <br/>
[External_signature] <br/>
[External_file_use] <br/>
' " '<br/>
<br/>
<br/>
===DLL externals ===
DLL_external ::= ' " ' dll <br/>
[windows] <br/>
DLL_identifier <br/>
[DLL_index] <br/>
[External_signature] <br/>
[External_file_use] <br/>
' " ' <br/>
DLL_identifier ::= Simple_string <br/>
DLL_index ::= Integer<br/>
<br/>
<br/>
===Comments ===
Comment ::= "– –" {Simple_string Comment_break …}* <br/>
Comment_break ::= New_line [Blanks_or_tabs] "– –"<br/>
<br/>
===Integers ===
Integer ::= [Integer_base] Digit_sequence <br/>
Integer_base ::= "0" Integer_base_letter <br/>
Integer_base_letter ::= "b"  |  "c"  |  "x" |  "B"  |  "C"  |  "X" <br/>
Digit_sequence ::= Digit+ <br/>
Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"  | <br/>
"a" | "b" | "c" | "d" | "e" | "f" | <br/>
"A" | "B" | "C" | "D" | "E" | "F" | "_"<br/>


